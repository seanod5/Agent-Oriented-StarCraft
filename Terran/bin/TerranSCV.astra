agent terranSCV {
	module EIS eis;
	module Console C;
	module System S;
	module modules.Prelude2 P;
	module modules.Buildings buildings;
	
	types messaging {
		formula content(string);
		formula built(string);
		formula building(string);
		formula attack(int);
		formula explore(int, int);
	}
	
	types status {
		formula conditions(list);
		formula busy(boolean);
		formula idle(boolean);
		formula exploring(boolean);
	}
	
	types resources {
		formula minerals(int);
		formula vespeneGas(int);
	}
	
	initial !init();
	initial minerals(50);
	initial vespeneGas(0);
	initial busy(false);
	initial conditions(["idle"]);
	initial exploring(false);
	
	rule +!init() {
		eis.join("starcraft");
		eis.link();
		C.println("SCV online.");
	}
	
	rule +!gatherMinerals() : busy(boolean busy) & (busy == false) {
		query(eis.mineralField(int ID, int resources, int group, int x, int y));
		eis.gather(ID);
	}
	
	rule +!gatherVespeneGas() {
		query(eis.vespeneGeyser(int ID, int resources, int group, int x, int y));
		eis.gather(ID);
	}
	
	rule +!buildVespeneRefinery() {
		wait((minerals(int m)) & (m >= 100));
		query(eis.vespeneGeyser(int ID, int resources, int group, int x, int y));
		C.println("Building Vespene Refinery at " + x + ", " + y);
		eis.stop();
		eis.build("Terran Refinery", x, y);
		wait((conditions(list conds1)) & (P.contains(conds1, "constructing")));
		C.println("building...");
		send(inform, "Building Manager", content("Building"));
		wait((conditions(list conds2)) & (~P.contains(conds2, "constructing")));
		-busy(true);
		+busy(false);
		C.println("terranRefinery built!");
		send(inform, "Building Manager", content("Done"));
	}
	
	rule +!buildStructure(string structure, int mCost, int gCost) {
		wait((minerals(int m)) & (m >= mCost) & (vespeneGas(int g)) & (g >= gCost));
		query(eis.constructionSite(int x, int y));
		C.println("Building " + structure + " at " + x + ", " + y);
		eis.stop();
		eis.build(structure, x, y);
		wait((conditions(list conds1)) & (P.contains(conds1, "constructing")));
		C.println("building...");
		send(inform, "Building Manager", content("Building"));
		wait((conditions(list conds2)) & (~P.contains(conds2, "constructing")));
		-busy(true);
		+busy(false);
		C.println(structure + " built!");
		send(inform, "Building Manager", content("Done"));
		!gatherMinerals();
	}
	
	rule +$eis.event(status(int health, int shield, int energy, list conditions, int x, int y)) : conditions(list prevConds) & busy(boolean busy) {		
		-conditions(prevConds);
		+conditions(conditions);
		
		if(P.contains(conditions, "idle") & (busy == false)) {
			!gatherMinerals();
		}
	}
	
	rule +$eis.event(status(int health, int shield, int energy, list conditions, int x, int y)) : health == 0 {
		S.terminate();
	}

	rule +$eis.event(resources(int minerals, int gas, int CS, int TS)) : minerals(int prevM) & vespeneGas(int prevG) {
		-minerals(prevM);
		-vespeneGas(prevG);
		+minerals(minerals);
		+vespeneGas(gas);
	}
	
	rule @message(inform, string sender, content(string structure)) {
		-busy(false);
		+busy(true);
		eis.stop();
		if(structure == "Terran Refinery") {
			!buildVespeneRefinery();
		}
		else {
			list costs = buildings.cost(structure);
			!buildStructure(structure, P.valueAsInt(costs, 0), P.valueAsInt(costs, 1));
		}
	}
	
	rule @message(inform, "Exploration Manager", explore(int x, int y)) {
		eis.stop();
		eis.move(x, y);
		-exploring(false);
		+exploring(true);
	}
	
	rule @message(inform, "Combat Manager", attack(int ID)) : exploring(false) {
		C.println("Orders received, attacking " + ID);
		eis.attack(ID);
	}
}
