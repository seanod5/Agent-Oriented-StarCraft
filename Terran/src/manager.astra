agent manager {
	module EIS eis;
	module Console C;
	module System S;
	module modules.Prelude2 P;
	module modules.Entities ent;
	module Messaging messaging;
	
	types messaging {
		formula content(string);
	}
	
	types status {
		formula exploreRequest(boolean);
	}
	
	initial exploreRequest(false);
	
	rule +!main(list args) {
		eis.launch("starcraft", "localeisbw-dep.jar");
		eis.join();
		eis.init([map(""), own_race("terran"), starcraft_location("C:\\Program Files (x86)\\StarCraft"), debug("true")]);
		eis.startEnv();
		eis.link("manager");
		C.println("Manager linked.");
		messaging.installService("local", "astra.messaging.LocalMQService");
		messaging.startService("local");
		S.createAgent("Building Manager", "buildingManager");
		S.createAgent("Combat Manager", "combatManager");
		S.createAgent("Exploration Manager", "explorationManager");
		!play();
	}
	
	rule +!play() : exploreRequest(boolean exploreRequest) {
		list marines = S.getAgentsOfType("terranMarine");
		if((P.size(marines) > 0) & ((P.size(marines) % 5) == 0) & (exploreRequest == false)) {
			send(inform, "Exploration Manager", content("ready"));
			C.println("Explore sent");
			-exploreRequest(false);
			+exploreRequest(true);
		}
		if(P.size(eis.freeEntities()) > 0) {
			list freeEntities = eis.freeEntities();
			forall(string ID : freeEntities) {
				if(ent.isAgent(eis.getEntityType(ID)) == true) {
					S.createAgent(ID, eis.getEntityType(ID));	//Class names match entity types.	
				}
				else {
					S.createAgent(ID, "dummyAgent");
				}
			}
		}
		!play();
	}
	
	rule +!play() {
		!play();
	}
	
	rule @message(inform, "Exploration Manager", content("Party Sent")) {
		-exploreRequest(true);
		+exploreRequest(false);
	}
}
