agent terranCommandCenter {
	module EIS eis;
	module Console C;
	module System S;
	module Prelude P;
	module modules.Exploration explore;
	
	types status {
		formula queueSize(int);
	}
	
	types resources {
		formula minerals(int);
		formula vespeneGas(int);
		formula currentSupply(int);
		formula totalSupply(int);
	}
	
	types messages {
		formula content(string);
		formula supply(string);
		formula ready(string);
		formula explore(int, int);
	}
	
	types checks {
		formula supplyRequest(boolean);
	}
	
	initial !init();
	initial minerals(50);
	initial vespeneGas(0);
	initial currentSupply(4);
	initial totalSupply(10);
	initial queueSize(0);
	initial supplyRequest(false);
	initial waiting(true);
	
	rule +!init() {
		eis.join("starcraft");
		eis.link();
		C.println("Command Center online.");
		int i = 0;
		while(i < 6) {
			!trainSCV();
			i++;
		}
	}
	
	rule +!trainSCV() : minerals(int minerals) & currentSupply(int CS) & totalSupply(int TS) & (minerals >= 50) & (CS < TS) & queueSize(int queueSize) & (queueSize < 5) {
		eis.train("Terran SCV");
	}
	
	rule +!trainSCV() {
		!trainSCV();
	}
	
	rule +$eis.event(queueSize(int size)) : queueSize(int prevSize) {
		-queueSize(prevSize);
		+queueSize(size);
	}
	
	rule +$eis.event(resources(int minerals, int gas, int CS, int TS)) : minerals(int prevM) & vespeneGas(int prevG) {
		-minerals(prevM);
		-vespeneGas(prevG);
		+minerals(minerals);
		+vespeneGas(gas);
	}
	
	rule +$eis.event(resources(int minerals, int gas, int CS, int TS)) : (CS == TS) & (supplyRequest(false)) {
		-supplyRequest(false);
		+supplyRequest(true);
		send(inform, "Building Manager", content("Build Base"));
	}
	
	rule +$eis.event(status(int health, int shield, int energy, list conditions, int x, int y)) : health == 0 {
		S.terminate();
	}
	
	rule +$eis.event(base(int x, int y, string isStart, int regionID)) : (isStart ~= "true") {
		explore.addBase(x, y);
	}
}
