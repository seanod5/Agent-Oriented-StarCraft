agent TerranSCV {
	module EIS eis;
	module Console C;
	module Prelude P;
	
	types model {
		formula mineralsX(list);
		formula mineralsY(list);
		formula availableMinerals(list);
		formula myID(int);
//		formula ready(boolean);
	}
	
	initial !init();
	initial availableMinerals([]);
	initial mineralsX([]);
	initial mineralsY([]);
	initial myID(0);
//	initial ready(false);
	
	rule +!init() {
		eis.join("starcraft");
		eis.link();
		C.println("SCV linked.");
		!test();
		//!collectMinerals();
	}
	
	rule +!test() : mineralsX(list xList) & mineralsY(list yList) & availableMinerals(list L) {
//		int x = P.valueAsInt(xList, 0);
//		int y = P.valueAsInt(yList, 0);
//		C.println("Coordinates: " + x + ", " + y);
//		eis.move(x, y);
		int ID = P.valueAsInt(L, 0);
		eis.gather(ID);
	}
	
//	rule +!test() {
//		!test();
//	}
	
	rule +!collectMinerals() : availableMinerals(list L) {
		C.println(L);
		int blah = P.headAsInt(L);
		eis.gather(blah);
	}
	
	rule +$eis.event(mineralField(int ID, int resources, int group, int x, int y)) : availableMinerals(list L) & mineralsX(list minX) & mineralsY(list minY) {
		P.add(L, ID);
		P.add(minX, x);
		P.add(minY, y);
		+availableMinerals(L);
		+mineralsX(minX);
		+mineralsY(minY);
//		+ready(true);
	}
	
//	rule +$eis.event(self(int ID, string type, int health, int shield, int energy)) {
//		+myID(ID);
//	}
	
}
