agent TerranSCV {
	module EIS eis;
	module Console C;
	module Prelude P;
	
	types model {
		formula availableMinerals(list);
		formula availableVespene(list);
		formula content(string);
		formula constructSitesX(list);
		formula constructSitesY(list);
	}
	
	initial !init();
	initial availableMinerals([]);
	initial availableVespene([]);
	initial constructSitesX([]);
	initial constructSitesY([]);
	
	rule +!init() {
		eis.join("starcraft");
		eis.link();
		C.println("SCV linked.");
		
		!gatherMinerals();
	}
	
	rule +!gatherMinerals() : availableMinerals(list L) {
		int ID = P.valueAsInt(L, 0);
		eis.gather(ID);
	}
	
	rule +!gatherMinerals() {
		!gatherMinerals();
	}
	
	rule +!gatherVespene() : availableVespene(list L) {
		int ID = P.valueAsInt(L, 0);
		eis.gather(ID);
	}
	
	rule +!buildStructure(string structure) : constructSitesX(list sitesX) & constructSitesY(list sitesY) {
		C.println(P.headAsInt(sitesX) + P.headAsInt(sitesY));
		int x = P.headAsInt(sitesX);
		int y = P.headAsInt(sitesY);
		eis.build(structure, x, y);
	}
	
	rule +$eis.event(mineralField(int ID, int resources, int group, int x, int y)) : availableMinerals(list prev) {
		list new = prev;
		P.add(new, ID);
		-availableMinerals(prev);
		+availableMinerals(new);
	}
	
	rule +$eis.event(vespeneGeyser(int ID, int resources, int group, int x, int y)) : availableVespene(list prev) {
		list new = prev;
		P.add(new, ID);
		-availableVespene(prev);
		+availableVespene(new);
	}
	
	rule +$eis.event(constructionSite(int x, int y)) : constructSitesX(list prevX) & constructSitesY(list prevY) {
		list newX = prevX;
		list newY = prevY;
		-constructSitesX(prevX);
		+constructSitesX(newX);
		-constructSitesY(prevY);
		+constructSitesY(newY);
	}
	
	rule @message(inform, string sender, content(string content)) {
		C.println("Message received from " + sender + ", building " + content);
		!buildStructure(content);
	}
}
