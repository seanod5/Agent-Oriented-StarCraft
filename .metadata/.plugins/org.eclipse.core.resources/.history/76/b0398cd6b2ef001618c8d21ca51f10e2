agent Player {
	module EIS eis;
	module Console C;
	module System S;
	module Prelude P;
	
	types model {
		formula currentSupply(int);	//Number of units currently alive
		formula totalSupply(int);	//Number; of units the player can have
		formula unitIDs(list);
		formula content(string);
		formula minerals(int);
	}
	
	initial minerals(50);
	initial currentSupply(4);
	initial totalSupply(10);
	initial unitIDs([]);

	rule +!main(list args) {
		boolean matchFlag = false;
		eis.launch("starcraft", "localeisbw-dep.jar");
		eis.join();
		eis.init([map("(2)Astral Balance.scm"), own_race("terran"), starcraft_location("C:\\Program Files (x86)\\StarCraft"), debug("true")]);
		eis.startEnv();
		eis.link("manager");
		C.println("Player ready.");
		
		list freeEntities = [];
		while(matchFlag == false) {
			freeEntities = eis.freeEntities();	// List will contain a Command Center and four SCVs
			if(P.size(eis.freeEntities()) > 0) {
				matchFlag = true;
			}
		}
		
		P.sort_asc(freeEntities);	// Ensures Command Center is top of list
		S.sleep(2000);
		S.createAgent(P.headAsString(freeEntities), "TerranCommandCenter");
			C.println(eis.getEntityType(P.headAsString(freeEntities)));
		
		list SCVs = P.tail(freeEntities);
		
		forall(string ID : SCVs) {
			S.createAgent(ID, "TerranSCV");
			S.sleep(500);	// Allows for nicer output
		}
		
//		while(true) {
			!play();
//		}	
	}
	
	//Currently this rule simply connects each unit to its respective class as they spawn
	rule +!play() {
		list freeEntities = eis.freeEntities();
		forall(string ID : freeEntities) {
			if(eis.getEntityType(ID) == "terranSCV") {
				S.createAgent(ID, "TerranSCV");
			}
			if(eis.getEntityType(ID) == "terranCommandCenter") {
				S.createAgent(ID, "TerranCommandCenter");
			}
		}
		!play();
	}
}
