/**
 * GENERATED CODE - DO NOT CHANGE
 */

import astra.core.*;
import astra.execution.*;
import astra.event.*;
import astra.messaging.*;
import astra.formula.*;
import astra.lang.*;
import astra.statement.*;
import astra.term.*;
import astra.type.*;
import astra.tr.*;
import astra.reasoner.util.*;


public class Player extends ASTRAClass {
	public Player() {
		setParents(new Class[] {astra.lang.Agent.class});
		addRule(new Rule(
			"Player", new int[] {7,9,7,28},
			new GoalEvent('+',
				new Goal(
					new Predicate("main", new Term[] {
						new Variable(Type.LIST, "args",false)
					})
				)
			),
			Predicate.TRUE,
			new Block(
				"Player", new int[] {7,27,36,5},
				new Statement[] {
					new Declaration(
						new Variable(Type.BOOLEAN, "matchFlag"),
						"Player", new int[] {8,8,36,5},
						Primitive.newPrimitive(false)
					),
					new ModuleCall("eis",
						"Player", new int[] {9,8,9,53},
						new Predicate("launch", new Term[] {
							Primitive.newPrimitive("starcraft"),
							Primitive.newPrimitive("localeisbw-dep.jar")
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.EIS) intention.getModule("Player","eis")).launch(
									(java.lang.String) intention.evaluate(predicate.getTerm(0)),
									(java.lang.String) intention.evaluate(predicate.getTerm(1))
								);
							}
						}
					),
					new ModuleCall("eis",
						"Player", new int[] {10,8,10,18},
						new Predicate("join", new Term[] {}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.EIS) intention.getModule("Player","eis")).join(
								);
							}
						}
					),
					new ModuleCall("eis",
						"Player", new int[] {11,8,11,124},
						new Predicate("init", new Term[] {
							new Funct("map", new Term[] {
								Primitive.newPrimitive("(2)Astral Balance.scm")
							}),
							new Funct("own_race", new Term[] {
								Primitive.newPrimitive("terran")
							}),
							new Funct("starcraft_location", new Term[] {
								Primitive.newPrimitive("C:\Program Files (x86)\StarCraft\")
							})
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return true;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.EIS) intention.getModule("Player","eis")).auto_action(intention,evaluate(intention,predicate));
							}
						}
					),
					new ModuleCall("eis",
						"Player", new int[] {12,8,12,22},
						new Predicate("startEnv", new Term[] {}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.EIS) intention.getModule("Player","eis")).startEnv(
								);
							}
						}
					),
					new ModuleCall("eis",
						"Player", new int[] {13,8,13,26},
						new Predicate("link", new Term[] {
							Primitive.newPrimitive("player")
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.EIS) intention.getModule("Player","eis")).link(
									(java.lang.String) intention.evaluate(predicate.getTerm(0))
								);
							}
						}
					),
					new ModuleCall("C",
						"Player", new int[] {14,8,14,34},
						new Predicate("println", new Term[] {
							Primitive.newPrimitive("Player ready.")
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.Console) intention.getModule("Player","C")).println(
									(java.lang.String) intention.evaluate(predicate.getTerm(0))
								);
							}
						}
					),
					new ModuleCall("C",
						"Player", new int[] {15,8,15,57},
						new Predicate("println", new Term[] {
							Operator.newOperator('+',
								Primitive.newPrimitive("Free entities: "),
								new ModuleTerm("eis", Type.LIST,
									new Predicate("freeEntities", new Term[] {}),
									new ModuleTermAdaptor() {
										public Object invoke(Intention intention, Predicate predicate) {
											return ((astra.lang.EIS) intention.getModule("Player","eis")).freeEntities(
											);
										}
										public Object invoke(BindingsEvaluateVisitor visitor, Predicate predicate) {
											return ((astra.lang.EIS) visitor.agent().getModule("Player","eis")).freeEntities(
											);
										}
									}
								)
							)
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.Console) intention.getModule("Player","C")).println(
									(java.lang.String) intention.evaluate(predicate.getTerm(0))
								);
							}
						}
					),
					new ModuleCall("C",
						"Player", new int[] {16,8,16,55},
						new Predicate("println", new Term[] {
							Operator.newOperator('+',
								Primitive.newPrimitive("All entities: "),
								new ModuleTerm("eis", Type.LIST,
									new Predicate("allEntities", new Term[] {}),
									new ModuleTermAdaptor() {
										public Object invoke(Intention intention, Predicate predicate) {
											return ((astra.lang.EIS) intention.getModule("Player","eis")).allEntities(
											);
										}
										public Object invoke(BindingsEvaluateVisitor visitor, Predicate predicate) {
											return ((astra.lang.EIS) visitor.agent().getModule("Player","eis")).allEntities(
											);
										}
									}
								)
							)
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.Console) intention.getModule("Player","C")).println(
									(java.lang.String) intention.evaluate(predicate.getTerm(0))
								);
							}
						}
					),
					new Declaration(
						new Variable(Type.LIST, "freeEntities"),
						"Player", new int[] {18,8,36,5},
						new ListTerm(new Term[] {

						})
					),
					new While(
						"Player", new int[] {19,8,36,5},
						new Comparison("==",
							new Variable(Type.BOOLEAN, "matchFlag"),
							Primitive.newPrimitive(false)
						),
						new Block(
							"Player", new int[] {19,34,24,9},
							new Statement[] {
								new Assignment(
									new Variable(Type.LIST, "freeEntities"),
									"Player", new int[] {20,12,24,9},
									new ModuleTerm("eis", Type.LIST,
										new Predicate("freeEntities", new Term[] {}),
										new ModuleTermAdaptor() {
											public Object invoke(Intention intention, Predicate predicate) {
												return ((astra.lang.EIS) intention.getModule("Player","eis")).freeEntities(
												);
											}
											public Object invoke(BindingsEvaluateVisitor visitor, Predicate predicate) {
												return ((astra.lang.EIS) visitor.agent().getModule("Player","eis")).freeEntities(
												);
											}
										}
									)
								),
								new If(
									"Player", new int[] {21,12,24,9},
									new Comparison(">",
										new ModuleTerm("P", Type.INTEGER,
											new Predicate("size", new Term[] {
												new ModuleTerm("eis", Type.LIST,
													new Predicate("freeEntities", new Term[] {}),
													new ModuleTermAdaptor() {
														public Object invoke(Intention intention, Predicate predicate) {
															return ((astra.lang.EIS) intention.getModule("Player","eis")).freeEntities(
															);
														}
														public Object invoke(BindingsEvaluateVisitor visitor, Predicate predicate) {
															return ((astra.lang.EIS) visitor.agent().getModule("Player","eis")).freeEntities(
															);
														}
													}
												)
											}),
											new ModuleTermAdaptor() {
												public Object invoke(Intention intention, Predicate predicate) {
													return ((astra.lang.Prelude) intention.getModule("Player","P")).size(
														(astra.term.ListTerm) intention.evaluate(predicate.getTerm(0))
													);
												}
												public Object invoke(BindingsEvaluateVisitor visitor, Predicate predicate) {
													return ((astra.lang.Prelude) visitor.agent().getModule("Player","P")).size(
														(astra.term.ListTerm) visitor.evaluate(predicate.getTerm(0))
													);
												}
											}
										),
										Primitive.newPrimitive(0)
									),
									new Block(
										"Player", new int[] {21,46,23,13},
										new Statement[] {
											new Assignment(
												new Variable(Type.BOOLEAN, "matchFlag"),
												"Player", new int[] {22,16,23,13},
												Primitive.newPrimitive(true)
											)
										}
									)
								)
							}
						)
					),
					new ModuleCall("P",
						"Player", new int[] {26,8,26,32},
						new Predicate("sort_asc", new Term[] {
							new Variable(Type.LIST, "freeEntities")
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.Prelude) intention.getModule("Player","P")).sort_asc(
									(astra.term.ListTerm) intention.evaluate(predicate.getTerm(0))
								);
							}
						}
					),
					new ModuleCall("S",
						"Player", new int[] {27,8,27,74},
						new Predicate("createAgent", new Term[] {
							new ModuleTerm("P", Type.STRING,
								new Predicate("headAsString", new Term[] {
									new Variable(Type.LIST, "freeEntities")
								}),
								new ModuleTermAdaptor() {
									public Object invoke(Intention intention, Predicate predicate) {
										return ((astra.lang.Prelude) intention.getModule("Player","P")).headAsString(
											(astra.term.ListTerm) intention.evaluate(predicate.getTerm(0))
										);
									}
									public Object invoke(BindingsEvaluateVisitor visitor, Predicate predicate) {
										return ((astra.lang.Prelude) visitor.agent().getModule("Player","P")).headAsString(
											(astra.term.ListTerm) visitor.evaluate(predicate.getTerm(0))
										);
									}
								}
							),
							Primitive.newPrimitive("TerranCommandCenter")
						}),
						new DefaultModuleCallAdaptor() {
							public boolean inline() {
								return false;
							}

							public boolean invoke(Intention intention, Predicate predicate) {
								return ((astra.lang.System) intention.getModule("Player","S")).createAgent(
									(java.lang.String) intention.evaluate(predicate.getTerm(0)),
									(java.lang.String) intention.evaluate(predicate.getTerm(1))
								);
							}
						}
					),
					new Declaration(
						new Variable(Type.LIST, "SCVs"),
						"Player", new int[] {29,8,36,5},
						new ModuleTerm("P", Type.LIST,
							new Predicate("tail", new Term[] {
								new Variable(Type.LIST, "freeEntities")
							}),
							new ModuleTermAdaptor() {
								public Object invoke(Intention intention, Predicate predicate) {
									return ((astra.lang.Prelude) intention.getModule("Player","P")).tail(
										(astra.term.ListTerm) intention.evaluate(predicate.getTerm(0))
									);
								}
								public Object invoke(BindingsEvaluateVisitor visitor, Predicate predicate) {
									return ((astra.lang.Prelude) visitor.agent().getModule("Player","P")).tail(
										(astra.term.ListTerm) visitor.evaluate(predicate.getTerm(0))
									);
								}
							}
						)
					),
					new ForAll(
						"Player", new int[] {31,8,31,34},
						new Variable(Type.STRING, "name",false),
						new Variable(Type.LIST, "SCVs"),
						new Block(
							"Player", new int[] {31,35,36,5},
							new Statement[] {
								new ModuleCall("C",
									"Player", new int[] {32,12,32,27},
									new Predicate("println", new Term[] {
										new Variable(Type.STRING, "name")
									}),
									new DefaultModuleCallAdaptor() {
										public boolean inline() {
											return false;
										}

										public boolean invoke(Intention intention, Predicate predicate) {
											return ((astra.lang.Console) intention.getModule("Player","C")).println(
												(java.lang.String) intention.evaluate(predicate.getTerm(0))
											);
										}
									}
								),
								new ModuleCall("S",
									"Player", new int[] {33,12,33,44},
									new Predicate("createAgent", new Term[] {
										new Variable(Type.STRING, "name"),
										Primitive.newPrimitive("TerranSCV")
									}),
									new DefaultModuleCallAdaptor() {
										public boolean inline() {
											return false;
										}

										public boolean invoke(Intention intention, Predicate predicate) {
											return ((astra.lang.System) intention.getModule("Player","S")).createAgent(
												(java.lang.String) intention.evaluate(predicate.getTerm(0)),
												(java.lang.String) intention.evaluate(predicate.getTerm(1))
											);
										}
									}
								),
								new ModuleCall("S",
									"Player", new int[] {34,12,34,24},
									new Predicate("sleep", new Term[] {
										Primitive.newPrimitive(1000)
									}),
									new DefaultModuleCallAdaptor() {
										public boolean inline() {
											return false;
										}

										public boolean invoke(Intention intention, Predicate predicate) {
											return ((astra.lang.System) intention.getModule("Player","S")).sleep(
												(java.lang.Integer) intention.evaluate(predicate.getTerm(0))
											);
										}
									}
								)
							}
						)
					)
				}
			)
		));
	}

	public void initialize(astra.core.Agent agent) {
		agent.addSensorAdaptor(new SensorAdaptor() {
			public void sense(astra.core.Agent agent) {
				((astra.lang.EIS) agent.getModule("Player","eis")).sense();
			}
		});

	}

	public Fragment createFragment(astra.core.Agent agent) throws ASTRAClassNotFoundException {
		Fragment fragment = new Fragment(this);
		fragment.addModule("eis",astra.lang.EIS.class,agent);
		fragment.addModule("C",astra.lang.Console.class,agent);
		fragment.addModule("S",astra.lang.System.class,agent);
		fragment.addModule("P",astra.lang.Prelude.class,agent);
		return fragment;
	}

	public static void main(String[] args) {
		Scheduler.setStrategy(new BasicSchedulerStrategy());
		ListTerm argList = new ListTerm();
		for (String arg: args) {
			argList.add(Primitive.newPrimitive(arg));
		}

		String name = java.lang.System.getProperty("astra.name", "main");
		try {
			astra.core.Agent agent = new Player().newInstance(name);
			agent.initialize(new Goal(new Predicate("main", new Term[] { argList })));
			Scheduler.schedule(agent);
		} catch (AgentCreationException e) {
			e.printStackTrace();
		} catch (ASTRAClassNotFoundException e) {
			e.printStackTrace();
		};
	}
}
